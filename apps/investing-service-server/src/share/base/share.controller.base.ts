/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShareService } from "../share.service";
import { ShareCreateInput } from "./ShareCreateInput";
import { Share } from "./Share";
import { ShareFindManyArgs } from "./ShareFindManyArgs";
import { ShareWhereUniqueInput } from "./ShareWhereUniqueInput";
import { ShareUpdateInput } from "./ShareUpdateInput";
import { PortfolioFindManyArgs } from "../../portfolio/base/PortfolioFindManyArgs";
import { Portfolio } from "../../portfolio/base/Portfolio";
import { PortfolioWhereUniqueInput } from "../../portfolio/base/PortfolioWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class ShareControllerBase {
  constructor(protected readonly service: ShareService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Share })
  async createShare(@common.Body() data: ShareCreateInput): Promise<Share> {
    return await this.service.createShare({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Share] })
  @ApiNestedQuery(ShareFindManyArgs)
  async shares(@common.Req() request: Request): Promise<Share[]> {
    const args = plainToClass(ShareFindManyArgs, request.query);
    return this.service.shares({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Share })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async share(
    @common.Param() params: ShareWhereUniqueInput
  ): Promise<Share | null> {
    const result = await this.service.share({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Share })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShare(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() data: ShareUpdateInput
  ): Promise<Share | null> {
    try {
      return await this.service.updateShare({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Share })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShare(
    @common.Param() params: ShareWhereUniqueInput
  ): Promise<Share | null> {
    try {
      return await this.service.deleteShare({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/portfolios")
  @ApiNestedQuery(PortfolioFindManyArgs)
  async findPortfolios(
    @common.Req() request: Request,
    @common.Param() params: ShareWhereUniqueInput
  ): Promise<Portfolio[]> {
    const query = plainToClass(PortfolioFindManyArgs, request.query);
    const results = await this.service.findPortfolios(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        quantity: true,

        share: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/portfolios")
  async connectPortfolios(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        connect: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/portfolios")
  async updatePortfolios(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        set: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/portfolios")
  async disconnectPortfolios(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        disconnect: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: ShareWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        price: true,

        share: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: ShareWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateShare({
      where: params,
      data,
      select: { id: true },
    });
  }
}
